{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"BABYLON\"","webpack:///./src/CommonUtility.ts","webpack:///./src/BabylonUtility.ts","webpack:///external \"React\"","webpack:///external \"$\"","webpack:///external \"ReactDOM\"","webpack:///./src/MessageBoard.tsx","webpack:///./src/Scene.ts","webpack:///./src/LoginPanel.ts","webpack:///./src/ControlPanel.ts","webpack:///./src/main.tsx"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","BABYLON","__webpack_exports__","CommonUtility","getRandomBoolean","Math","random","getRandomNumberInRange","min","max","digits","rate","pow","getRandomIntInRange","floor","getRandomInt","getRandomNegativeInt","getRandomNegativeNumber","getRandomNumber","digitsOnInt","digitsOnFloat","result","round","sort","array","func","a","b","shuffle","temporaryValue","randomIndex","currentIndex","length","BabylonUtility","distanceVector","v1","v2","dx","x","dy","y","dz","z","sqrt","addVector","Vector3","subtractVector","getRandomVector3","randomOnX","randomOnY","randomOnZ","_CommonUtility__WEBPACK_IMPORTED_MODULE_0__","normalize","updatePosition","position","translateVector","scale","positionToString","map","k","toFixed","join","getLineToEachOther","points","lines","forEach","from","iOfFrom","to","iOfTo","distance","key","push","React","$","ReactDOM","ContentType","Scene_Scene","Scene","glowColorInRGB","this","texts","canvas","document","getElementById","engine","external_BABYLON_","cameraLocations","bubbleSprays","colorsSetForParticle","diffuseColor","glowColor","set","particles","linesForLinesystem","linesystem","translateFactor","translateType","chatRoomsNodes","chatRoomsCenter","linesForChatRooms","highlightForLine","colorSetForLines","textNodes","init","_this","initScene","getTexts","getPoints","registerRunRenderLoop","external_$_","show","window","addEventListener","resize","scene","camera","speed","setTarget","Zero","attachControl","intensity","lightOfCamera","diffuse","specular","skyboxMaterial","backFaceCulling","reflectionTexture","coordinatesMode","SKYBOX_MODE","specularColor","disableLighting","skybox","CreateBox","material","infiniteDistance","renderingGroupId","createBubbleSpray","sphere","CreateSphere","diameter","segments","bubbleSpray","addShape","mesh","buildMesh","bubbleMat","alpha","bind","dispose","initParticles","nbParticles","recycleParticle","particle","velocity","updateParticle","addInPlace","setParticles","computeParticleColor","computeParticleTexture","computeParticleRotation","viewport","toGlobal","getEngine","runRenderLoop","e","shift","createBubbleSprayAndParticles","translateLinesForTextNodes","translateParticles","render","updateDevPanel","innerHTML","getFps","onTextAdd","text","outputplaneTexture","width","height","drawText","hasAlpha","outputplane","CreatePlane","billboardMode","BILLBOARDMODE_ALL","scaling","diffuseTexture","onImageAdd","image","CreateFromBase64String","Date","now","emissiveColor","createParticle","center","range","colorSetIndex","colorInRGB","color","radius","core","coreMaterial","Black","glowLayerForParticle","customEmissiveColorSelector","subMesh","replace","addIncludedOnlyMesh","duration","getDurationForParticle","startUpdateTextNodeWorker","worker","Worker","onmessage","message","nodes","data","node","cos","vector","slice","postMessage","CreateLineSystem","updatable","instance","White","pointInGroups","keys","pointInGroup","concat","linesInGroup","maxLine","axis","console","log","drawLine","innerGlow","materials","mat","meshContainer","materialIndex","line","CreateTube","path","group","merged","MergeMeshes","addMesh","img","Image","src","onload","createElement","context","getContext","drawImage","imgData","getImageData","takeWidth","pixels","len","g","brightness","pixelNumber","rowNumber","culNumber","filter","transformation","setTimeout","zoomIn","randomChatRoomIndex","chatRoom","destination","CreateHermiteSpline","LoginPanel","afterWordCardsAnimation","afterLogin","gapi","load","initClient","wordCardsAnimation","fadeAnimation","ele","times","onComplete","$ele","fadeIn","undefined","fadeOut","sustain","fadeSequence","eleArray","setting","afterFunc","$wordCards","toArray","client","clientId","apiKey","discoveryDocs","scope","then","auth2","getAuthInstance","isSignedIn","queryUser","setSignInButton","listen","login","on","signIn","people","resourceName","requestMask.includeField","resp","names","displayName","setLoiginButton","$loginPanel","animate","opacity","hide","ControlPanel","initPanel","switchTextInput","handleText","handleFiles","toggleClass","$input","String","val","focus","$mask","addClass","removeClass","currentTarget","files","FR","FileReader","base64Image","target","readAsDataURL","done","fail","err","MessageBoard_MessageBoard","_super","MessageBoard","__extends","external_React_","props","contents","loginPanel","main_scene","type","Text","content","b64String","external_ReactDOM_"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","module.exports = BABYLON;","\nexport class CommonUtility {\n\n    static getRandomBoolean() {\n        return Math.random() >= 0.5;\n    };\n\n\n    static getRandomNumberInRange(min: number, max: number, digits: number) {\n        const rate = Math.pow(10, digits);\n        return CommonUtility.getRandomIntInRange(min * rate, max * rate) / rate;\n    };\n\n    static getRandomIntInRange(min: number, max: number) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    };\n\n    static getRandomInt(digits?: number) {\n        const r = CommonUtility.getRandomBoolean() ? 1 : -1;\n        return CommonUtility.getRandomNegativeInt(digits) * r;\n    };\n\n    static getRandomNegativeInt(digits?: number) {\n        return CommonUtility.getRandomNegativeNumber(digits);\n    };\n\n    static getRandomNumber(digitsOnInt?: number, digitsOnFloat?: number) {\n        const r = CommonUtility.getRandomBoolean() ? 1 : -1;\n        return CommonUtility.getRandomNegativeNumber(digitsOnInt, digitsOnFloat) * r;\n    };\n\n    static getRandomNegativeNumber(digitsOnInt?: number, digitsOnFloat?: number) {\n        digitsOnInt = digitsOnInt || 1;\n        digitsOnFloat = digitsOnFloat || 0\n        let result = Math.round(Math.random() * Math.pow(10, digitsOnInt + digitsOnFloat));\n        if (digitsOnFloat !== 0) result = result / Math.pow(10, digitsOnFloat);\n        return result;\n    };\n\n\n    static sort<T>(array: T[], func: (e: T) => number) {\n        array.sort((a, b) => {\n            return func(a) - func(b);\n        });\n        return array;\n    };\n\n    static shuffle<T>(array: T[]) {\n        let currentIndex = array.length;\n        let temporaryValue;\n        let randomIndex;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n\n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            // And swap it with the current element.\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue;\n        }\n\n        return array;\n    }\n\n};","import { CommonUtility } from './CommonUtility';\n\nexport class BabylonUtility {\n\n\n    static distanceVector(v1: BABYLON.Vector3, v2: BABYLON.Vector3) {\n        var dx = v1.x - v2.x;\n        var dy = v1.y - v2.y;\n        var dz = v1.z - v2.z;\n\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    };\n\n    static addVector(v1: BABYLON.Vector3, v2: BABYLON.Vector3) {\n        return new BABYLON.Vector3(\n            v1.x + v2.x,\n            v1.y + v2.y,\n            v1.z + v2.z\n        );\n    };\n\n    static subtractVector(v1: BABYLON.Vector3, v2: BABYLON.Vector3) {\n        return new BABYLON.Vector3(\n            v1.x - v2.x,\n            v1.y - v2.y,\n            v1.z - v2.z\n        );\n    };\n    \n    static getRandomVector3(randomOnX = true, randomOnY = true, randomOnZ = true) {\n        return new BABYLON.Vector3(\n            randomOnX ? CommonUtility.getRandomInt() : 0,\n            randomOnY ? CommonUtility.getRandomInt() : 0,\n            randomOnZ ? CommonUtility.getRandomInt() : 0\n        ).normalize();\n    };\n\n\n    static updatePosition(position: BABYLON.Vector3, translateVector: BABYLON.Vector3, scale: number) {\n        position.x += (translateVector.x * scale);\n        position.y += (translateVector.y * scale);\n        position.z += (translateVector.z * scale);\n    };\n\n\n    static positionToString(position: BABYLON.Vector3) {\n        const positions = ['x', 'y', 'z'].map(k => {\n            return position[k].toFixed(2);\n        });\n        return positions.join(', ');\n    };\n\n\n    static getLineToEachOther(points: BABYLON.Vector3[]) {\n\n        const lines: Line[] = [];\n        points.forEach((from, iOfFrom) => {\n            points.forEach((to, iOfTo) => {\n                if (iOfFrom < iOfTo) {\n                    const distance = BabylonUtility.distanceVector(from, to);\n                    const key = `${iOfFrom}-${iOfTo}`;\n                    lines.push({\n                        key: key,\n                        from: from,\n                        to: to,\n                        distance: distance\n                    });\n                }\n            });\n        });\n        return lines;\n    };\n};\n\n\nexport interface Line {\n    key: string,\n    from: BABYLON.Vector3,\n    to: BABYLON.Vector3,\n    distance: number\n};","module.exports = React;","module.exports = $;","module.exports = ReactDOM;","import * as React from \"react\";\n\n\nexport class MessageBoard extends React.Component<MessageBoardProps, {}> {\n\n    render() {\n        return <h1>Len: {this.props.contents.length}</h1>;\n    }\n};\n\n\nexport enum ContentType {\n    Text, Image\n};\n\nexport interface Content {\n    type: ContentType;\n    content: string;\n};\n\ninterface MessageBoardProps {\n    contents: Content[];\n};","import * as BABYLON from 'babylonjs';\nimport * as $ from 'jquery';\nimport { CommonUtility } from './CommonUtility';\nimport { BabylonUtility, Line } from './BabylonUtility';\nimport { ControlPanel } from './ControlPanel';\n\n\nexport class Scene {\n\n    private texts: BABYLON.Mesh[] = [];\n\n\n    private canvas = document.getElementById(\"renderCanvas\");\n    private engine = new BABYLON.Engine(this.canvas as HTMLCanvasElement, true);\n    private scene: BABYLON.Scene;\n\n\n    private camera: BABYLON.UniversalCamera;\n    private lightOfCamera: BABYLON.PointLight;\n    private cameraLocations: BABYLON.Vector3[] = [];\n\n\n    private glowLayerForParticle: BABYLON.GlowLayer;\n    private bubbleSprays: BABYLON.SolidParticleSystem[] = [];\n\n\n\n    /******* Add the create scene function ******/\n    init() {\n\n        this.initScene();\n        this.getTexts();\n        this.getPoints();\n\n        this.registerRunRenderLoop();\n        // new ControlPanel().initPanel(this.onTextAdd.bind(this), this.onImageAdd.bind(this));\n\n\n        $('#devPanel').show();\n        window.addEventListener(\"resize\", () => {\n            this.engine.resize();\n        });\n    };\n\n    private initScene() {\n        const scene = this.scene = new BABYLON.Scene(this.engine);\n\n        const camera = this.camera = new BABYLON.UniversalCamera(\"Camera\", new BABYLON.Vector3(0, 0, -25), this.scene);\n        camera.speed = 0.5;\n        camera.setTarget(BABYLON.Vector3.Zero());\n        camera.attachControl(this.canvas, true);\n\n\n        new BABYLON.HemisphericLight(\"HemiLight1\", new BABYLON.Vector3(0, 0, 10), scene).intensity = 0.8;\n        new BABYLON.HemisphericLight(\"HemiLight2\", new BABYLON.Vector3(0, 0, -10), scene).intensity = 0.8;\n\n        this.lightOfCamera = new BABYLON.PointLight(\"lightOfCamera\", new BABYLON.Vector3(0, 0, 0), scene);\n        this.lightOfCamera.diffuse = new BABYLON.Color3(1, 1, 1);\n        this.lightOfCamera.specular = new BABYLON.Color3(0.8, 0.8, 0.2);\n        this.lightOfCamera.intensity = 0.3;\n\n\n        const skyboxMaterial = new BABYLON.StandardMaterial(\"skyBox\", scene);\n        skyboxMaterial.backFaceCulling = false;\n        skyboxMaterial.reflectionTexture = new BABYLON.CubeTexture(\"assets/skybox/sb\", scene);\n        skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\n        skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);\n        skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);\n        skyboxMaterial.disableLighting = true;\n        const skybox = BABYLON.Mesh.CreateBox(\"skyBox\", 1500.0, scene);\n        skybox.material = skyboxMaterial;\n        skybox.infiniteDistance = true;\n        skybox.renderingGroupId = 0;\n    };\n\n\n    private createBubbleSpray(position: BABYLON.Vector3) {\n        // creation\n        const sphere = BABYLON.MeshBuilder.CreateSphere(\"s\", { diameter: 0.08, segments: 12 }, this.scene);\n        const bubbleSpray = new BABYLON.SolidParticleSystem('bubbleSpray', this.scene);\n\n        bubbleSpray.addShape(sphere, 20);\n        const mesh = bubbleSpray.buildMesh();\n        mesh.material = function () {\n            const bubbleMat = new BABYLON.StandardMaterial(\"bubbleMat\", this.scene);\n            //mat.backFaceCulling = false;\n            bubbleMat.alpha = 0.1;\n\n            return bubbleMat;\n        }.bind(this)();\n\n        mesh.position = position;\n\n        sphere.dispose();\n\n\n        // behavior definition\n        const speed = 0.01;\n\n        // init\n        bubbleSpray.initParticles = function () {\n            // just recycle everything\n            for (var p = 0; p < this.nbParticles; p++) {\n                this.recycleParticle(this.particles[p]);\n            }\n        };\n\n        // recycle\n        let scale;\n        bubbleSpray.recycleParticle = (particle) => {\n            // Set particle new velocity, scale and rotation\n            // As this function is called for each particle, we don't allocate new\n            // memory by using \"new BABYLON.Vector3()\" but we set directly the\n            // x, y, z particle properties instead\n            particle.position.x = 0;\n            particle.position.y = 0;\n            particle.position.z = 0;\n            particle.velocity.x = (Math.random() - 0.5) * speed / 3;\n            particle.velocity.y = Math.random() * speed;\n            particle.velocity.z = (Math.random() - 0.5) * speed / 3;\n            scale = 1 * Math.random() + 0.2;\n            particle.scale.x = scale;\n            particle.scale.y = scale;\n            particle.scale.z = scale;\n            particle['age'] = Math.random() * 0.8;\n\n            return particle;\n        };\n\n        // update : will be called by setParticles()\n        bubbleSpray.updateParticle = (particle) => {\n            // some physics here \n            if (particle.position.y < 0 || particle['age'] < 0) {\n                bubbleSpray.recycleParticle(particle);\n            }\n            (particle.position).addInPlace(particle.velocity);      // update particle new position\n            particle.position.y += speed / 2;\n\n            particle['age'] -= 0.01;\n\n            return particle;\n        };\n\n\n        // init all particle values and set them once to apply textures, colors, etc\n        bubbleSpray.initParticles();\n        bubbleSpray.setParticles();\n\n        // Tuning : \n        bubbleSpray.computeParticleColor = false;\n        bubbleSpray.computeParticleTexture = false;\n        bubbleSpray.computeParticleRotation = false;\n\n        this.bubbleSprays.push(bubbleSpray);\n    };\n\n\n    private registerRunRenderLoop() {\n\n        const origin = { x: 0, y: 0, z: 0 } as BABYLON.Vector3;\n        const viewport = this.camera.viewport.toGlobal(this.camera.getEngine(), null);\n        const $mark = $('.mark');\n\n\n        this.engine.runRenderLoop(() => {\n\n            /** render before */\n            this.bubbleSprays.forEach(e => e.setParticles());\n\n            if (this.cameraLocations.length > 0) {\n                const position = this.camera.position = this.cameraLocations.shift();\n                if (this.cameraLocations.length >= 1) {\n                    this.camera.setTarget(BABYLON.Vector3.Zero());\n                    if (this.cameraLocations.length === 1)\n                        this.createBubbleSprayAndParticles();\n                }\n            }\n\n            this.lightOfCamera.position = this.camera.position;\n            this.translateLinesForTextNodes();\n            this.translateParticles();\n            this.bubbleSprays.forEach(e => e.setParticles());\n            /** render before end */\n\n\n            this.scene.render();\n\n\n            /** render after */\n            this.updateDevPanel();\n\n            /*             const text = this.texts[0];\n                        if (!text) return;\n                        const transformationMatrix = this.camera.getViewMatrix().multiply(this.camera.getProjectionMatrix());\n                        const projectedPosition = BABYLON.Vector3.Project(origin, text.computeWorldMatrix(false), transformationMatrix, viewport);\n            \n                        if (projectedPosition.z > 1) {\n                            $mark.hide();\n                            return;\n                        }\n                        $mark.show();\n                        $mark.css('top', projectedPosition.y + 60);\n                        $mark.css('left', projectedPosition.x);\n                        const scale = 1 / (1 - projectedPosition.z);\n                        // $mark.css('transform', 'translate(-50%, -50%) scale(' + scale + ',' + scale + ')');\n                        $mark.text(JSON.stringify(projectedPosition)); */\n            /** render after end */\n        });\n    };\n\n    private updateDevPanel() {\n\n        const $fps = document.getElementById('fps');\n        $fps.innerHTML = this.engine.getFps().toFixed() + ' fps';\n        const $coordinate = document.getElementById('coordinate');\n        $coordinate.innerHTML = BabylonUtility.positionToString(this.camera.position);\n    };\n\n    private onTextAdd(text: string, x: number, y: number, z: number) {\n        const outputplaneTexture = new BABYLON.DynamicTexture(\n            \"dynamic texture\",\n            { width: 500, height: 80 },\n            this.scene,\n            true\n        );\n        outputplaneTexture.drawText(text, 0, 60, \"60px verdana\", \"white\", 'true');\n        outputplaneTexture.hasAlpha = true;\n\n        const outputplane = BABYLON.MeshBuilder.CreatePlane(\n            \"outputplane\",\n            { width: 5, height: 1 },\n            this.scene\n        );\n        outputplane.billboardMode = BABYLON.AbstractMesh.BILLBOARDMODE_ALL;\n        outputplane.position = new BABYLON.Vector3(x, y, z);\n        outputplane.scaling.y = 1;\n        outputplane['_message'] = text;\n\n        const material = outputplane.material = new BABYLON.StandardMaterial(\"outputplane\", this.scene);\n        material.diffuseTexture = outputplaneTexture;\n        material.alpha = 0;\n        material.backFaceCulling = false;\n\n        this.texts.push(outputplane);\n    };\n\n\n    private onImageAdd(image: string, x: number, y: number, z: number) {\n        const outputplaneTexture = BABYLON.Texture.CreateFromBase64String(\n            image,\n            'image-' + Date.now,\n            this.scene\n        );\n        // outputplaneTexture.hasAlpha = true;\n\n        const outputplane = BABYLON.MeshBuilder.CreatePlane(\"outputplane\", { width: 5, height: 5 }, this.scene);\n        outputplane.billboardMode = BABYLON.AbstractMesh.BILLBOARDMODE_ALL;\n        outputplane.position = new BABYLON.Vector3(x, y, z);\n        outputplane.scaling.y = 1;\n\n        const material = outputplane.material = new BABYLON.StandardMaterial(\"outputplane\", this.scene);\n        material.diffuseTexture = outputplaneTexture;\n        material.specularColor = new BABYLON.Color3(0, 0, 0);\n        material.emissiveColor = new BABYLON.Color3(1, 1, 1);\n        material.backFaceCulling = false;\n    };\n\n\n    private colorsSetForParticle = [\n        { diffuseColor: [253, 245, 134], glowColor: [255, 252, 193, 0.85] },\n        { diffuseColor: [253, 229, 210], glowColor: [255, 219, 225, 0.85] },\n        { diffuseColor: [252, 247, 255], glowColor: [255, 249, 254, 0.85] }\n    ].map(set => {\n        set.diffuseColor = set.diffuseColor.map(n => n / 255);\n        set.glowColor = set.glowColor.map((n, i) => i !== 3 ? n / 255 : n);\n        return set;\n    });\n    private particles: {\n        mesh: BABYLON.Mesh,\n        translateVector: BABYLON.Vector3,\n        duration: number\n    }[] = [];\n    private createParticle(center: BABYLON.Vector3) {\n        const range = 15;\n        const position = new BABYLON.Vector3(\n            center.x + (CommonUtility.getRandomIntInRange(range * -1, range) * 0.1),\n            center.y + (CommonUtility.getRandomIntInRange(range * -1, range) * 0.1),\n            center.z + (CommonUtility.getRandomIntInRange(range * -1, range) * 0.1),\n        );\n\n\n        const colorSetIndex = CommonUtility.getRandomIntInRange(0, 2);\n        const colorSet = this.colorsSetForParticle[colorSetIndex];\n        const colorInRGB = colorSet.diffuseColor;\n        const color = new BABYLON.Color3(colorInRGB[0], colorInRGB[1], colorInRGB[2]);\n\n        const radius = CommonUtility.getRandomIntInRange(50, 70) * 0.001;\n\n        const core = BABYLON.Mesh.CreateSphere(`core-colorSetIndex:${colorSetIndex}`, 2, radius, this.scene);\n        core.position = position;\n\n        const coreMaterial = core.material = new BABYLON.StandardMaterial(`coreMaterial`, this.scene);\n        coreMaterial.diffuseColor = color;\n        coreMaterial.emissiveColor = BABYLON.Color3.Black();\n\n        if (!this.glowLayerForParticle) {\n            this.glowLayerForParticle = new BABYLON.GlowLayer(\"glowLayerForParticle\", this.scene);\n            this.glowLayerForParticle.intensity = 0.5;\n            this.glowLayerForParticle.customEmissiveColorSelector = (mesh, subMesh, material, result) => {\n                const colorSetIndex = mesh.name.replace('core-colorSetIndex:', '');\n                const glowColor = this.colorsSetForParticle[colorSetIndex].glowColor;\n                result.set(glowColor[0], glowColor[1], glowColor[2], glowColor[3]);\n            }\n        }\n        this.glowLayerForParticle.addIncludedOnlyMesh(core);\n\n\n        const translateVector = BabylonUtility.getRandomVector3();\n        this.particles.push({\n            mesh: core,\n            translateVector: translateVector,\n            duration: this.getDurationForParticle()\n        });\n    };\n\n    private linesForLinesystem: BABYLON.Vector3[][] = [];\n    private linesystem: BABYLON.LinesMesh = null;\n    private translateFactor = 0;\n    private translateType: 'Simple' | 'ToOrigin' | 'ToChatRoomNode' = 'Simple';\n    private startUpdateTextNodeWorker() {\n        if (!window['Worker']) return;\n        const worker = new Worker(\"dist/UpdateTextNodeWorker.js\");\n        const next = () => {\n            let nodes: BABYLON.Vector3[] = [];\n            if (this.translateType === 'Simple') {\n                nodes = this.textNodes.map(node => {\n                    BabylonUtility.updatePosition(node.position, node.translateVector, node.scale * Math.cos(this.translateFactor));\n                    return node.position;\n                });\n                this.translateFactor += 0.01;\n            }\n            else if (this.translateType === 'ToOrigin') {\n                nodes = this.textNodes.map(node => {\n                    const vector = new BABYLON.Vector3(-node.position.x, -node.position.y, -node.position.z).normalize();\n                    BabylonUtility.updatePosition(node.position, vector, 0.5);\n                    return node.position;\n                });\n            }\n            else if (this.translateType === 'ToChatRoomNode') {\n                this.textNodes = this.textNodes.slice(0, this.chatRoomsNodes.length);\n                nodes = this.textNodes.map((node, i) => {\n                    const vector = BabylonUtility.subtractVector(this.chatRoomsNodes[i], node.position).normalize();\n                    BabylonUtility.updatePosition(node.position, vector, 0.5);\n                    return node.position;\n                });\n            }\n            worker.postMessage(nodes);\n        };\n        worker.onmessage = (message) => {\n            if (this.textNodes.length === 0) {\n                this.linesForLinesystem.length = 0;\n                this.linesystem.dispose();\n                return;\n            }\n            this.linesForLinesystem = message.data;\n            next();\n        };\n        worker.postMessage(this.textNodes);\n    };\n\n    private translateLinesForTextNodes() {\n        if (this.linesForLinesystem.length === 0) return;\n\n        this.linesystem = BABYLON.MeshBuilder.CreateLineSystem(\"linesystem\", {\n            lines: this.linesForLinesystem,\n            updatable: true,\n            instance: this.linesystem || null\n        }, this.scene);\n        this.linesystem.color = BABYLON.Color3.White();\n    };\n\n    private translateParticles() {\n        if (this.particles.length === 0) return;\n        const scale = 0.003;\n        this.particles.forEach(p => {\n            if (p.duration <= 0) {\n                p.translateVector = BabylonUtility.getRandomVector3();\n                p.duration = this.getDurationForParticle();\n            }\n            BabylonUtility.updatePosition(p.mesh.position, p.translateVector, scale);\n            p.duration -= 1;\n        });\n    };\n\n\n    // unit: frame number\n    private getDurationForParticle() {\n        return CommonUtility.getRandomIntInRange(60 * 3, 60 * 6);\n    };\n\n    private chatRoomsNodes: BABYLON.Vector3[] = [];\n    private chatRoomsCenter: BABYLON.Vector3[] = [];\n    private linesForChatRooms: Line[] = [];\n\n    private getPoints() {\n        $.getJSON(\n            'apis/getPoints',\n            (data: { 'key': BABYLON.Vector3[] }) => {\n                let pointInGroups: BABYLON.Vector3[][] = [];\n                Object.keys(data).forEach((key, i) => {\n                    const pointInGroup = data[key].map(p =>\n                        new BABYLON.Vector3(p.x, p.y, CommonUtility.getRandomNumber(3) * 0.006)\n                    );\n                    this.chatRoomsNodes = this.chatRoomsNodes.concat(pointInGroup);\n                    pointInGroups[i] = pointInGroup;\n                });\n                let lines: Line[] = [];\n\n                const take = 120;\n                pointInGroups.forEach(points => {\n                    const linesInGroup = BabylonUtility.getLineToEachOther(points);\n                    const maxLine = CommonUtility.sort(linesInGroup, e => e.distance)[linesInGroup.length - 1];\n                    const center = new BABYLON.Vector3(0, 0, 0);\n                    Object.keys(center).forEach(axis => {\n                        center[axis] = (maxLine.from[axis] + maxLine.to[axis]) / 2\n                    });\n                    this.chatRoomsCenter.push(center);\n                    lines = lines.concat(linesInGroup.slice(0, take));\n                });\n                console.log(`line count: ${lines.length}`);\n                this.linesForChatRooms = lines;\n            }\n        );\n    };\n\n\n    private createBubbleSprayAndParticles() {\n        this.chatRoomsCenter.forEach(center => {\n\n            this.createBubbleSpray(center);\n\n            for (let i = 0; i < 10; i++) {\n                this.createParticle(center);\n            }\n        });\n    };\n\n\n\n    private highlightForLine: BABYLON.HighlightLayer = null;\n    private colorSetForLines = [\n        [199, 222, 205],\n        [192, 231, 164],\n        [168, 213, 133]\n    ].map(set => set.map(n => n / 255));\n\n\n    private glowColor = function () {\n        const glowColorInRGB = [246 / 255, 255 / 255, 201 / 255, 0.84];\n        return new BABYLON.Color3(glowColorInRGB[0], glowColorInRGB[1], glowColorInRGB[2])\n    }();\n\n    private drawLine() {\n\n        if (this.linesForChatRooms.length === 0) return;\n\n        const highlightForLine = this.highlightForLine =\n            this.highlightForLine ||\n            function () {\n                const highlightForLine = new BABYLON.HighlightLayer(\"highlightForLine\", this.scene);\n                highlightForLine.innerGlow = false;\n                return highlightForLine;\n            }.bind(this)();\n\n        const materials = this.colorSetForLines.map((colorInRGB, i) => {\n            const color = new BABYLON.Color3(colorInRGB[0], colorInRGB[1], colorInRGB[2]);\n            const mat = new BABYLON.StandardMaterial(`lineMat${i}`, this.scene);\n            mat.diffuseColor = color;\n            return mat;\n        });\n\n        const meshContainer: BABYLON.Mesh[][] = [[], [], []];\n        this.linesForChatRooms.forEach((e, i) => {\n            const materialIndex = CommonUtility.getRandomIntInRange(0, 2);\n            const line = BABYLON.MeshBuilder.CreateTube(`line${i}`, {\n                path: [e.from, e.to],\n                radius: 0.03,\n                updatable: false\n            }, this.scene);\n            line.material = materials[materialIndex];\n            meshContainer[materialIndex].push(line);\n        });\n        meshContainer.forEach(group => {\n            if (group.length === 0) return;\n            const merged = BABYLON.Mesh.MergeMeshes(group, true, false);\n            highlightForLine.addMesh(merged, this.glowColor);\n        });\n    };\n\n\n\n    private textNodes: {\n        position: BABYLON.Vector3,\n        scale: number,\n        translateVector: BABYLON.Vector3\n    }[] = [];\n\n    private getTexts() {\n        var img = new Image();\n        img.src = 'assets/textImage/image.png';\n        img.onload = () => {\n            var canvas = document.createElement('canvas');\n            var height = canvas.height = img.height;\n            var width = canvas.width = img.width;\n            var context = canvas.getContext('2d');\n            context.drawImage(img, 0, 0, width, height);\n\n\n            // inputs\n            var startX = 64;\n            var startY = 64;\n            var takeWidth = 64;\n            var rateOfWoverH = 1 / 1;\n\n            var takeHeight = takeWidth / rateOfWoverH;\n            var imgData = context.getImageData(startX, startY, takeWidth, takeHeight);\n\n\n            var pixels: {\n                x: number,\n                y: number,\n                r: number,\n                g: number,\n                b: number,\n                brightness: number\n            }[] = [];\n            var len = imgData.data.length;\n            for (var i = 0; i < len; i += 4) {\n\n                var r = imgData.data[i];\n                var g = imgData.data[i + 1];\n                var b = imgData.data[i + 2];\n                var brightness = (0.299 * r) + (0.587 * g) + (0.114 * b);\n\n                var pixelNumber = (i / 4) + 1;\n                var rowNumber = Math.floor(pixelNumber / takeWidth);\n                var culNumber = pixelNumber % takeWidth;\n                pixels.push({\n                    x: culNumber,\n                    y: rowNumber,\n                    r: r,\n                    g: g,\n                    b: b,\n                    brightness: brightness\n                });\n            }\n            this.textNodes = pixels\n                .filter(p => p.brightness > 100)\n                .map((p, i) => {\n                    const rate = 0.15;\n                    // const s = BABYLON.Mesh.CreateSphere(`pixels-${i}`, 2, 0.2, this.scene);\n                    const position = new BABYLON.Vector3(\n                        (p.x - 32) * rate,\n                        (p.y - 32) * -1 * rate,\n                        -15 + CommonUtility.getRandomNumberInRange(0, 2, 2)\n                    );\n                    return {\n                        position: position,\n                        scale: CommonUtility.getRandomNumberInRange(-0.05, 0.05, 3),\n                        translateVector: BabylonUtility.getRandomVector3(false, false).normalize()\n                    };\n                });\n            this.startUpdateTextNodeWorker();\n        };\n    };\n\n\n    transformation() {\n        this.translateType = 'ToOrigin';\n        setTimeout(() => {\n            this.translateType = 'ToChatRoomNode';\n        }, 5 * 1000);\n        setTimeout(() => {\n            this.translateType = null;\n            this.textNodes.length = 0;\n            this.drawLine();\n        }, 10 * 1000);\n    };\n\n    zoomIn() {\n        const randomChatRoomIndex = CommonUtility.getRandomIntInRange(0, this.chatRoomsCenter.length - 1);\n        const chatRoom = this.chatRoomsCenter[randomChatRoomIndex];\n        const destination = chatRoom ?\n            new BABYLON.Vector3(chatRoom.x * 3, chatRoom.y * 3, 0) :\n            BABYLON.Vector3.Zero();\n\n        const curve = BABYLON.Curve3.CreateHermiteSpline(\n            this.camera.position,\n            BABYLON.Vector3.Zero(),\n            destination,\n            BABYLON.Vector3.Zero(),\n            60 * 5\n        );\n        const points = curve.getPoints();\n        this.cameraLocations = points;\n    };\n};\n","declare const gapi: any;\n\n\nconst clientId = '380947346613-l6gvf9laj9fuko3ljph9ej99olo5qa3k.apps.googleusercontent.com';\nconst apiKey = 'AIzaSyBmozdLmtDDry_ah4NhYPqOTeZ2wr9Er2A';\n\nexport class LoginPanel {\n\n    init() {\n        gapi.load('client', this.initClient.bind(this));\n        this.wordCardsAnimation();\n    };\n\n    afterWordCardsAnimation = () => { };\n\n    private fadeAnimation(\n        ele: HTMLElement,\n        times: {\n            fadeIn: number,\n            sustain?: number,\n            fadeOut?: number\n        },\n        onComplete: () => void\n    ) {\n\n        const $ele = $(ele)\n        $ele.fadeIn(times.fadeIn, undefined, () => {\n            if (!times.fadeOut) {\n                onComplete();\n                return;\n            }\n            setTimeout(() => {\n                $ele.fadeOut(times.fadeOut, undefined, () => {\n                    onComplete();\n                });\n\n            }, times.sustain || 0);\n        });\n    };\n\n    private fadeSequence(\n        eleArray: HTMLElement[],\n        setting: {\n            fadeIn: number,\n            sustain: number,\n            fadeOut: number\n        },\n        afterFunc: () => void) {\n\n        if (eleArray.length === 0) {\n            afterFunc();\n            return;\n        }\n\n        setting.fadeOut = (eleArray.length > 1) ? setting.fadeOut : null;\n        this.fadeAnimation(eleArray.shift(), setting, () => {\n            this.fadeSequence(eleArray, setting, afterFunc);\n        });\n    };\n\n    private wordCardsAnimation() {\n\n        const $wordCards = $('#loginPanel > div');\n        const times = {\n            fadeIn: 3000,\n            sustain: 1000,\n            fadeOut: 2000\n        };\n        this.fadeSequence($wordCards.toArray(), times, this.afterWordCardsAnimation);\n    };\n\n    private initClient() {\n        gapi.client.init({\n            clientId: clientId,\n            apiKey: apiKey,\n            discoveryDocs: ['https://people.googleapis.com/$discovery/rest?version=v1'],\n            scope: 'profile'\n        }).then(() => {\n            const isSignedIn = gapi.auth2.getAuthInstance().isSignedIn.get();\n            if (!isSignedIn) this.setSignInButton();\n            else this.queryUser();\n        });\n    };\n\n\n    private setSignInButton() {\n        gapi.auth2.getAuthInstance().isSignedIn.listen(this.login.bind(this));\n        // $('#signInWrapper').show();\n        $('#signinButton').on('click', () => gapi.auth2.getAuthInstance().signIn());\n    };\n\n\n\n    private queryUser() {\n        gapi.client.people.people.get({\n            'resourceName': 'people/me',\n            'requestMask.includeField': 'person.names'\n        }).then(resp => {\n            const name = resp.result.names[0].displayName;\n            this.setLoiginButton(name);\n        });\n    };\n\n    private setLoiginButton(name) {\n        // $('#signInWrapper').show();\n        $('#signInWrapper .buttonText').text(name);\n        $('#signinButton').on('click', this.login.bind(this));\n    };\n\n    private login() {\n        const $loginPanel = $('#loginPanel');\n        $loginPanel.animate({ opacity: 0 }, 2000, () => $loginPanel.hide());\n        this.afterLogin();\n    };\n\n    afterLogin: () => void = () => { };\n};","\n\nexport class ControlPanel {\n\n    private onTextAdd: (text: string) => void = null;\n    private onImageAdd: (image: string) => void = null;\n\n\n\n    initPanel(\n        onTextAdd: (text: string) => void,\n        onImageAdd: (image: string) => void\n    ) {\n\n        this.onTextAdd = onTextAdd;\n        this.onImageAdd = onImageAdd;\n        $('#textInputSwitch').on('click', this.switchTextInput.bind(this));\n        $('#sent').on('click', this.handleText.bind(this));\n        $('#fileUpload').on('change', this.handleFiles.bind(this));\n    };\n\n\n    private switchTextInput() {\n        const $textInput = $('#textInput');\n        $textInput.toggleClass('visible').toggleClass('invisible');\n    };\n\n\n    private handleText() {\n        var $input = $('#textInput>input');\n        var text = String($input.val());\n        if (!text) return;\n\n        $input.val('').focus();\n\n        this.onTextAdd(text);\n\n        const $mask = $('.mask');\n        $mask.addClass('flash');\n        setTimeout(() => {\n            $mask.removeClass('flash');\n        }, 500);\n\n        // mock response\n        window.setTimeout(() => {\n            this.onTextAdd(text + '! ' + text + '! ' + text + '!!!');\n        }, 700);\n    };\n\n\n    private handleFiles($ele) {\n        const image: Blob = $ele.currentTarget.files[0];\n        if (!image) return;\n\n        var FR = new FileReader();\n\n        FR.addEventListener(\"load\", e => {\n            const base64Image: string = e.target['result'];\n            this.onImageAdd(base64Image);\n        });\n\n        FR.readAsDataURL(image);\n\n\n        $.get('apis/uploadImage').done(function (resp) {\n            console.log(resp);\n        }).fail(function (err) {\n            console.log(err);\n        });\n    };\n};","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport { Scene } from './Scene';\nimport { LoginPanel } from './LoginPanel';\nimport { ControlPanel } from './ControlPanel';\nimport { MessageBoard, Content, ContentType } from './MessageBoard';\n\n\nconst loginPanel = new LoginPanel();\nconst scene = new Scene();\nloginPanel.afterWordCardsAnimation = scene.transformation.bind(scene);\nloginPanel.afterLogin = scene.zoomIn.bind(scene);\nloginPanel.init();\nscene.init();\n\n\nconst contents: Content[] = [{ type: ContentType.Text, content: 'asdasd' }];\nnew ControlPanel().initPanel(\n    text => contents.push({ type: ContentType.Text, content: text }),\n    b64String => contents.push({ type: ContentType.Image, content: b64String }),\n);\n\n\nReactDOM.render(\n    <MessageBoard contents={contents} />,\n    document.getElementById(\"MessageBoard\")\n);"],"sourceRoot":""}